<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="colOrigClOrdID.ToolTip" xml:space="preserve">
    <value>BMF: Contém o ClOrdID da oferta de substituição. Condicionado a ExecType = 5 (Substituição) | Bovespa: Contém o ClOrdID da oferta e substituição. Condicionado a ExecType = 4 (cancelamento) ou 5 (Substituição)</value>
  </data>
  <data name="colSecondaryOrderID.ToolTip" xml:space="preserve">
    <value>Identificador secundário da ordem, atribuído pela Bolsa, que identifica a oferta do sinal de difusão para atualizações do livro agregado por oferta, ao passo que o OrderID não é modificado nem enviado no sinal. Se a ordem for recebida com MaxFloor (quantidade aparente) &gt; 0, sempre que for reentrada pelo valor da quantidade aparente (e.g. devido a uma execução), novo SecondaryOrderID será atribuído à oferta. Esse identificador também pode ser usado para cancelar e alterar uma ordem.</value>
  </data>
  <data name="colExecType.ToolTip" xml:space="preserve">
    <value>BMF: Descreve a ação que gerou o relatório de execução. Consulte o campo OrdStatus(39) para o status atual da ordem (e.g. Parcialmente executada). Valores aceitos: 0 = nova; 4 = cancelamento de oferta; 5 = substituição; 8 = rejeição; F = negócio; H = cancelamento de negócio; C = término de validade; D = reconfirmação | Bovespa: Descreve a ação que gerou o relatório de execução. Consulte o campo OrdStatus(39) para o status atual da ordem (e.g. Parcialmente executada). Valores aceitos: 0 = nova; 1 = execução parcial; 2 = execução; 4 = cancelamento; 5 = substituição; 8 = rejeição; 9 = suspensão; L = acionamento</value>
  </data>
  <data name="colOrdStatus.ToolTip" xml:space="preserve">
    <value>BMF: Valores aceitos: 0 = nova; 1 = parcialmente executada; 2 = executada; 4 = cancelada; 5 = substituída (removida / substituída); 8 = rejeitada | Bovespa: Status da oferta. Valores aceitos: 0 = nova; 1 = parcialmente executada; 2 = executada; 4 = cancelada; 5 = substituída; 8 = rejeitada; 9 = suspensa</value>
  </data>
  <data name="colBTSFinalTxOrdStatus.ToolTip" xml:space="preserve">
    <value>Utilizado em cenários de varredura do livro de ofertas (quando a oferta percorre o livro e é executada contra várias outras), indicnado o estado final da ordem. Valores aceitos: 0 = nova; 1 = parcialmente executada; 2 = executada; 4 = cancelada; 5 = substituída; 8 = rejeitada. Esse campo é enviado na mensagem sempre que a ordem entra no livro de ofertas e é executada imediatamente contra uma ou mais ofertas na ponta oposta, gerando mais de uma mensagem relatório de execução para transmitir as informações de execução. Cada relatório de execução conterá o estado final da ordem do cliente nesse campo. Portanto, se uma ordem for executada parcialmente três vezes até ser completada, cada relatório de execução conterá os seguintes pares: Exec Rpt #1 (OrdStatus = parcialmente executada, BTSFinalTxOrdStatus = executada); Exec Rpt #2 (OrdStatus = parcialmente executada, BTSFinalTxOrdStatus = executada); e Exec Rpt #3 (OrdStatus = executada, BTSFinalTxOrdStatus = executada)</value>
  </data>
  <data name="colOrdRejReason.ToolTip" xml:space="preserve">
    <value>BMF: Para uso opcional com ExecType = 8 (rejeitada). Valores aceitos: 1 = símbolo desconhecido; 2 = fora do horário regular de negociação; 3 = ordem excede o limite; 4 = tarde demais para inserir; 5 = ordem desconhecida; 6 = ordem duplicada (e.g. ClOrdID duplicado); 11 = característica de ordem não suportada; 13 = quantidade incorreta; 15 = conta desconhecida; 99 = outros (erro genérico, consulte o campo Text para mais informações) | Bovespa: Código que identifica o motivo de rejeição da ordem. Para uso opcional com ExecType = 8 (rejeição). Valores válidos: 0 = opção do corretor; 1 = símbolo desconhecido; 2 = fora do horário regular de negociação; 3 = oferta excede o limite; 4 = tarde demais para inserir; 5 = oferta desconhecida; 6 = ordem duplicada (e.g. ClOrdID duplicado)</value>
  </data>
  <data name="colTimeInForce.ToolTip" xml:space="preserve">
    <value>BMF: Tempo de validade da ordem. A ausência desse campo significa que a ordem é válida para o dia. Valores aceitos: 0 = válida para o dia (ou sessão); 3 = executa integral ou parcialmente ou cancela (IOC ou FAK); 4 = executa integralmente ou cancela (FOK) | Bovespa: Tempo de validade da ordem. A ausência desse campo significa que a ordem é valida para o dia. Valores aceitos: 0 = válida para o dia; 1 = válida até ser cancelada (GTC); 2 = válida para a abertura do mercado (OPG); 3 = executa integral ou parcialmente ou cancela (IOC); 6 = válida até determinada data (GTD)</value>
  </data>
  <data name="colSymbol.ToolTip" xml:space="preserve">
    <value>BMF: Símbolo. A BMFBOVESPA exige que esse campo seja adequadamente preenchido. Ele contém a forma inteligível do campo SecurityID, disponível na mensagem de lista de instrumentos. | Bovespa: Símbolo da ação.</value>
  </data>
  <data name="colSecurityExchange.ToolTip" xml:space="preserve">
    <value>Mercado ao qual o instrumento pertence (campo 48). Valor aceito: XBMF=BMFBOVESPA. Esse campo é opcional e sua ausência implica a atribuição automática do valor XBMF (BMFBOVESPA) para mercado (Market Center)</value>
  </data>
  <metadata name="barManager1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>