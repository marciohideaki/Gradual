//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gradual.OMS.TesouroDireto.WSTDInvestidor
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "InvestidorSoap", Namespace = "http://www.cblc.com.br/")]
    public partial class Investidor : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private hdSeguranca hdSegurancaValueField;

        private System.Threading.SendOrPostCallback IncluirInvestidorOperationCompleted;

        private System.Threading.SendOrPostCallback IncluirInvestidor1OperationCompleted;

        private System.Threading.SendOrPostCallback HabilitarInvestidorOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public Investidor()
        {
            this.Url = global::Gradual.OMS.TesouroDireto.Properties.Settings.Default.Gradua_OMS_TesouroDireto_WSTDInvestidor_Investidor;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public hdSeguranca hdSegurancaValue
        {
            get
            {
                return this.hdSegurancaValueField;
            }
            set
            {
                this.hdSegurancaValueField = value;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event IncluirInvestidorCompletedEventHandler IncluirInvestidorCompleted;

        /// <remarks/>
        public event IncluirInvestidor1CompletedEventHandler IncluirInvestidor1Completed;

        /// <remarks/>
        public event HabilitarInvestidorCompletedEventHandler HabilitarInvestidorCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("hdSegurancaValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cblc.com.br/Novo", RequestElementName = "Novo", RequestNamespace = "http://www.cblc.com.br/", ResponseElementName = "NovoResponse", ResponseNamespace = "http://www.cblc.com.br/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("NovoResult")]
        public string IncluirInvestidor(
                    double CPF,
                    string DATA_NASCIMENTO,
                    long CODIGO_INVESTIDOR,
                    int DIGITO_INVESTIDOR,
                    string EMAIL,
                    int IDENTIFICACAO_OPERACAO,
                    int TAXA_CUSTODIA,
                    string NOME_INVESTIDOR,
                    string CODIGO_DOCUMENTO,
                    string TIPO_DOCUMENTO,
                    string ORGAO_EMISSOR_DOCUMENTO,
                    string SEXO_INVESTIDOR,
                    string ESTADO_CIVIL,
                    string NOME_CONJUGE,
                    int CODIGO_CAPACIDADE,
                    string NOME_RESPONSAVEL,
                    int QUALIFICACAO_RESPONSAVEL,
                    int CODIGO_ATIVIDADE,
                    int CODIGO_NACIONALIDADE,
                    string RUA_INVESTIDOR,
                    string NUMERO_ENDERECO,
                    string COMPLEMENTO,
                    string BAIRRO,
                    string CIDADE,
                    string UF,
                    long CEP,
                    int PREFIXO_TELEFONE,
                    long NUMERO_TELEFONE,
                    int CODIGO_DEPENDENTE_PESSOA_FISICA,
                    string CODIGO_PAIS,
                    int CODIGO_TIPO_INVESTIDOR_ATUAL,
                    string INDICADOR_PESSOA_VINCULADA,
                    string INDICADOR_EMISSAO_NOTAS_CORRETAGEM,
                    string CODIGO_TIPO_PESSOA,
                    string INDICADOR_CONTA_INVESTIMENTO,
                    string INDICADOR_DEVOLUCAO_MARGEM_GARANTIA,
                    string SIGLA_ESTADO_EMISSOR,
                    string CODIGO_TIPO_DOCUMENTO_COMPROBATORIO,
                    string NUMERO_DOCUMENTO_COMPROBATORIO,
                    string ORGAO_EMISSOR_COMPROBATORIO,
                    string SIGLA_ESTADO_EMISSOR_DOCUMENTO_COMPROBATORIO,
                    string REGISTRO_MOVIMENTO,
                    string PESSOA_POLITICAMENTE_EXPOSTA)
        {
            object[] results = this.Invoke("IncluirInvestidor", new object[] {
                        CPF,
                        DATA_NASCIMENTO,
                        CODIGO_INVESTIDOR,
                        DIGITO_INVESTIDOR,
                        EMAIL,
                        IDENTIFICACAO_OPERACAO,
                        TAXA_CUSTODIA,
                        NOME_INVESTIDOR,
                        CODIGO_DOCUMENTO,
                        TIPO_DOCUMENTO,
                        ORGAO_EMISSOR_DOCUMENTO,
                        SEXO_INVESTIDOR,
                        ESTADO_CIVIL,
                        NOME_CONJUGE,
                        CODIGO_CAPACIDADE,
                        NOME_RESPONSAVEL,
                        QUALIFICACAO_RESPONSAVEL,
                        CODIGO_ATIVIDADE,
                        CODIGO_NACIONALIDADE,
                        RUA_INVESTIDOR,
                        NUMERO_ENDERECO,
                        COMPLEMENTO,
                        BAIRRO,
                        CIDADE,
                        UF,
                        CEP,
                        PREFIXO_TELEFONE,
                        NUMERO_TELEFONE,
                        CODIGO_DEPENDENTE_PESSOA_FISICA,
                        CODIGO_PAIS,
                        CODIGO_TIPO_INVESTIDOR_ATUAL,
                        INDICADOR_PESSOA_VINCULADA,
                        INDICADOR_EMISSAO_NOTAS_CORRETAGEM,
                        CODIGO_TIPO_PESSOA,
                        INDICADOR_CONTA_INVESTIMENTO,
                        INDICADOR_DEVOLUCAO_MARGEM_GARANTIA,
                        SIGLA_ESTADO_EMISSOR,
                        CODIGO_TIPO_DOCUMENTO_COMPROBATORIO,
                        NUMERO_DOCUMENTO_COMPROBATORIO,
                        ORGAO_EMISSOR_COMPROBATORIO,
                        SIGLA_ESTADO_EMISSOR_DOCUMENTO_COMPROBATORIO,
                        REGISTRO_MOVIMENTO,
                        PESSOA_POLITICAMENTE_EXPOSTA});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void IncluirInvestidorAsync(
                    double CPF,
                    string DATA_NASCIMENTO,
                    long CODIGO_INVESTIDOR,
                    int DIGITO_INVESTIDOR,
                    string EMAIL,
                    int IDENTIFICACAO_OPERACAO,
                    int TAXA_CUSTODIA,
                    string NOME_INVESTIDOR,
                    string CODIGO_DOCUMENTO,
                    string TIPO_DOCUMENTO,
                    string ORGAO_EMISSOR_DOCUMENTO,
                    string SEXO_INVESTIDOR,
                    string ESTADO_CIVIL,
                    string NOME_CONJUGE,
                    int CODIGO_CAPACIDADE,
                    string NOME_RESPONSAVEL,
                    int QUALIFICACAO_RESPONSAVEL,
                    int CODIGO_ATIVIDADE,
                    int CODIGO_NACIONALIDADE,
                    string RUA_INVESTIDOR,
                    string NUMERO_ENDERECO,
                    string COMPLEMENTO,
                    string BAIRRO,
                    string CIDADE,
                    string UF,
                    long CEP,
                    int PREFIXO_TELEFONE,
                    long NUMERO_TELEFONE,
                    int CODIGO_DEPENDENTE_PESSOA_FISICA,
                    string CODIGO_PAIS,
                    int CODIGO_TIPO_INVESTIDOR_ATUAL,
                    string INDICADOR_PESSOA_VINCULADA,
                    string INDICADOR_EMISSAO_NOTAS_CORRETAGEM,
                    string CODIGO_TIPO_PESSOA,
                    string INDICADOR_CONTA_INVESTIMENTO,
                    string INDICADOR_DEVOLUCAO_MARGEM_GARANTIA,
                    string SIGLA_ESTADO_EMISSOR,
                    string CODIGO_TIPO_DOCUMENTO_COMPROBATORIO,
                    string NUMERO_DOCUMENTO_COMPROBATORIO,
                    string ORGAO_EMISSOR_COMPROBATORIO,
                    string SIGLA_ESTADO_EMISSOR_DOCUMENTO_COMPROBATORIO,
                    string REGISTRO_MOVIMENTO,
                    string PESSOA_POLITICAMENTE_EXPOSTA)
        {
            this.IncluirInvestidorAsync(CPF, DATA_NASCIMENTO, CODIGO_INVESTIDOR, DIGITO_INVESTIDOR, EMAIL, IDENTIFICACAO_OPERACAO, TAXA_CUSTODIA, NOME_INVESTIDOR, CODIGO_DOCUMENTO, TIPO_DOCUMENTO, ORGAO_EMISSOR_DOCUMENTO, SEXO_INVESTIDOR, ESTADO_CIVIL, NOME_CONJUGE, CODIGO_CAPACIDADE, NOME_RESPONSAVEL, QUALIFICACAO_RESPONSAVEL, CODIGO_ATIVIDADE, CODIGO_NACIONALIDADE, RUA_INVESTIDOR, NUMERO_ENDERECO, COMPLEMENTO, BAIRRO, CIDADE, UF, CEP, PREFIXO_TELEFONE, NUMERO_TELEFONE, CODIGO_DEPENDENTE_PESSOA_FISICA, CODIGO_PAIS, CODIGO_TIPO_INVESTIDOR_ATUAL, INDICADOR_PESSOA_VINCULADA, INDICADOR_EMISSAO_NOTAS_CORRETAGEM, CODIGO_TIPO_PESSOA, INDICADOR_CONTA_INVESTIMENTO, INDICADOR_DEVOLUCAO_MARGEM_GARANTIA, SIGLA_ESTADO_EMISSOR, CODIGO_TIPO_DOCUMENTO_COMPROBATORIO, NUMERO_DOCUMENTO_COMPROBATORIO, ORGAO_EMISSOR_COMPROBATORIO, SIGLA_ESTADO_EMISSOR_DOCUMENTO_COMPROBATORIO, REGISTRO_MOVIMENTO, PESSOA_POLITICAMENTE_EXPOSTA, null);
        }

        /// <remarks/>
        public void IncluirInvestidorAsync(
                    double CPF,
                    string DATA_NASCIMENTO,
                    long CODIGO_INVESTIDOR,
                    int DIGITO_INVESTIDOR,
                    string EMAIL,
                    int IDENTIFICACAO_OPERACAO,
                    int TAXA_CUSTODIA,
                    string NOME_INVESTIDOR,
                    string CODIGO_DOCUMENTO,
                    string TIPO_DOCUMENTO,
                    string ORGAO_EMISSOR_DOCUMENTO,
                    string SEXO_INVESTIDOR,
                    string ESTADO_CIVIL,
                    string NOME_CONJUGE,
                    int CODIGO_CAPACIDADE,
                    string NOME_RESPONSAVEL,
                    int QUALIFICACAO_RESPONSAVEL,
                    int CODIGO_ATIVIDADE,
                    int CODIGO_NACIONALIDADE,
                    string RUA_INVESTIDOR,
                    string NUMERO_ENDERECO,
                    string COMPLEMENTO,
                    string BAIRRO,
                    string CIDADE,
                    string UF,
                    long CEP,
                    int PREFIXO_TELEFONE,
                    long NUMERO_TELEFONE,
                    int CODIGO_DEPENDENTE_PESSOA_FISICA,
                    string CODIGO_PAIS,
                    int CODIGO_TIPO_INVESTIDOR_ATUAL,
                    string INDICADOR_PESSOA_VINCULADA,
                    string INDICADOR_EMISSAO_NOTAS_CORRETAGEM,
                    string CODIGO_TIPO_PESSOA,
                    string INDICADOR_CONTA_INVESTIMENTO,
                    string INDICADOR_DEVOLUCAO_MARGEM_GARANTIA,
                    string SIGLA_ESTADO_EMISSOR,
                    string CODIGO_TIPO_DOCUMENTO_COMPROBATORIO,
                    string NUMERO_DOCUMENTO_COMPROBATORIO,
                    string ORGAO_EMISSOR_COMPROBATORIO,
                    string SIGLA_ESTADO_EMISSOR_DOCUMENTO_COMPROBATORIO,
                    string REGISTRO_MOVIMENTO,
                    string PESSOA_POLITICAMENTE_EXPOSTA,
                    object userState)
        {
            if ((this.IncluirInvestidorOperationCompleted == null))
            {
                this.IncluirInvestidorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncluirInvestidorOperationCompleted);
            }
            this.InvokeAsync("IncluirInvestidor", new object[] {
                        CPF,
                        DATA_NASCIMENTO,
                        CODIGO_INVESTIDOR,
                        DIGITO_INVESTIDOR,
                        EMAIL,
                        IDENTIFICACAO_OPERACAO,
                        TAXA_CUSTODIA,
                        NOME_INVESTIDOR,
                        CODIGO_DOCUMENTO,
                        TIPO_DOCUMENTO,
                        ORGAO_EMISSOR_DOCUMENTO,
                        SEXO_INVESTIDOR,
                        ESTADO_CIVIL,
                        NOME_CONJUGE,
                        CODIGO_CAPACIDADE,
                        NOME_RESPONSAVEL,
                        QUALIFICACAO_RESPONSAVEL,
                        CODIGO_ATIVIDADE,
                        CODIGO_NACIONALIDADE,
                        RUA_INVESTIDOR,
                        NUMERO_ENDERECO,
                        COMPLEMENTO,
                        BAIRRO,
                        CIDADE,
                        UF,
                        CEP,
                        PREFIXO_TELEFONE,
                        NUMERO_TELEFONE,
                        CODIGO_DEPENDENTE_PESSOA_FISICA,
                        CODIGO_PAIS,
                        CODIGO_TIPO_INVESTIDOR_ATUAL,
                        INDICADOR_PESSOA_VINCULADA,
                        INDICADOR_EMISSAO_NOTAS_CORRETAGEM,
                        CODIGO_TIPO_PESSOA,
                        INDICADOR_CONTA_INVESTIMENTO,
                        INDICADOR_DEVOLUCAO_MARGEM_GARANTIA,
                        SIGLA_ESTADO_EMISSOR,
                        CODIGO_TIPO_DOCUMENTO_COMPROBATORIO,
                        NUMERO_DOCUMENTO_COMPROBATORIO,
                        ORGAO_EMISSOR_COMPROBATORIO,
                        SIGLA_ESTADO_EMISSOR_DOCUMENTO_COMPROBATORIO,
                        REGISTRO_MOVIMENTO,
                        PESSOA_POLITICAMENTE_EXPOSTA}, this.IncluirInvestidorOperationCompleted, userState);
        }

        private void OnIncluirInvestidorOperationCompleted(object arg)
        {
            if ((this.IncluirInvestidorCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncluirInvestidorCompleted(this, new IncluirInvestidorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("hdSegurancaValue")]
        [System.Web.Services.WebMethodAttribute(MessageName = "IncluirInvestidor1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cblc.com.br/Antigo", RequestElementName = "Antigo", RequestNamespace = "http://www.cblc.com.br/", ResponseElementName = "AntigoResponse", ResponseNamespace = "http://www.cblc.com.br/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AntigoResult")]
        public string IncluirInvestidor(
                    double CPF,
                    string DATA_NASCIMENTO,
                    long CODIGO_INVESTIDOR,
                    int DIGITO_INVESTIDOR,
                    string EMAIL,
                    int IDENTIFICACAO_OPERACAO,
                    int TAXA_CUSTODIA,
                    string NOME_INVESTIDOR,
                    string CODIGO_DOCUMENTO,
                    string TIPO_DOCUMENTO,
                    string ORGAO_EMISSOR_DOCUMENTO,
                    string SEXO_INVESTIDOR,
                    string ESTADO_CIVIL,
                    string NOME_CONJUGE,
                    int CODIGO_CAPACIDADE,
                    string NOME_RESPONSAVEL,
                    int QUALIFICACAO_RESPONSAVEL,
                    int CODIGO_ATIVIDADE,
                    int CODIGO_NACIONALIDADE,
                    string RUA_INVESTIDOR,
                    string NUMERO_ENDERECO,
                    string COMPLEMENTO,
                    string BAIRRO,
                    string CIDADE,
                    string UF,
                    long CEP,
                    int PREFIXO_TELEFONE,
                    long NUMERO_TELEFONE,
                    string PESSOA_POLITICAMENTE_EXPOSTA)
        {
            object[] results = this.Invoke("IncluirInvestidor1", new object[] {
                        CPF,
                        DATA_NASCIMENTO,
                        CODIGO_INVESTIDOR,
                        DIGITO_INVESTIDOR,
                        EMAIL,
                        IDENTIFICACAO_OPERACAO,
                        TAXA_CUSTODIA,
                        NOME_INVESTIDOR,
                        CODIGO_DOCUMENTO,
                        TIPO_DOCUMENTO,
                        ORGAO_EMISSOR_DOCUMENTO,
                        SEXO_INVESTIDOR,
                        ESTADO_CIVIL,
                        NOME_CONJUGE,
                        CODIGO_CAPACIDADE,
                        NOME_RESPONSAVEL,
                        QUALIFICACAO_RESPONSAVEL,
                        CODIGO_ATIVIDADE,
                        CODIGO_NACIONALIDADE,
                        RUA_INVESTIDOR,
                        NUMERO_ENDERECO,
                        COMPLEMENTO,
                        BAIRRO,
                        CIDADE,
                        UF,
                        CEP,
                        PREFIXO_TELEFONE,
                        NUMERO_TELEFONE,
                        PESSOA_POLITICAMENTE_EXPOSTA});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void IncluirInvestidor1Async(
                    double CPF,
                    string DATA_NASCIMENTO,
                    long CODIGO_INVESTIDOR,
                    int DIGITO_INVESTIDOR,
                    string EMAIL,
                    int IDENTIFICACAO_OPERACAO,
                    int TAXA_CUSTODIA,
                    string NOME_INVESTIDOR,
                    string CODIGO_DOCUMENTO,
                    string TIPO_DOCUMENTO,
                    string ORGAO_EMISSOR_DOCUMENTO,
                    string SEXO_INVESTIDOR,
                    string ESTADO_CIVIL,
                    string NOME_CONJUGE,
                    int CODIGO_CAPACIDADE,
                    string NOME_RESPONSAVEL,
                    int QUALIFICACAO_RESPONSAVEL,
                    int CODIGO_ATIVIDADE,
                    int CODIGO_NACIONALIDADE,
                    string RUA_INVESTIDOR,
                    string NUMERO_ENDERECO,
                    string COMPLEMENTO,
                    string BAIRRO,
                    string CIDADE,
                    string UF,
                    long CEP,
                    int PREFIXO_TELEFONE,
                    long NUMERO_TELEFONE,
                    string PESSOA_POLITICAMENTE_EXPOSTA)
        {
            this.IncluirInvestidor1Async(CPF, DATA_NASCIMENTO, CODIGO_INVESTIDOR, DIGITO_INVESTIDOR, EMAIL, IDENTIFICACAO_OPERACAO, TAXA_CUSTODIA, NOME_INVESTIDOR, CODIGO_DOCUMENTO, TIPO_DOCUMENTO, ORGAO_EMISSOR_DOCUMENTO, SEXO_INVESTIDOR, ESTADO_CIVIL, NOME_CONJUGE, CODIGO_CAPACIDADE, NOME_RESPONSAVEL, QUALIFICACAO_RESPONSAVEL, CODIGO_ATIVIDADE, CODIGO_NACIONALIDADE, RUA_INVESTIDOR, NUMERO_ENDERECO, COMPLEMENTO, BAIRRO, CIDADE, UF, CEP, PREFIXO_TELEFONE, NUMERO_TELEFONE, PESSOA_POLITICAMENTE_EXPOSTA, null);
        }

        /// <remarks/>
        public void IncluirInvestidor1Async(
                    double CPF,
                    string DATA_NASCIMENTO,
                    long CODIGO_INVESTIDOR,
                    int DIGITO_INVESTIDOR,
                    string EMAIL,
                    int IDENTIFICACAO_OPERACAO,
                    int TAXA_CUSTODIA,
                    string NOME_INVESTIDOR,
                    string CODIGO_DOCUMENTO,
                    string TIPO_DOCUMENTO,
                    string ORGAO_EMISSOR_DOCUMENTO,
                    string SEXO_INVESTIDOR,
                    string ESTADO_CIVIL,
                    string NOME_CONJUGE,
                    int CODIGO_CAPACIDADE,
                    string NOME_RESPONSAVEL,
                    int QUALIFICACAO_RESPONSAVEL,
                    int CODIGO_ATIVIDADE,
                    int CODIGO_NACIONALIDADE,
                    string RUA_INVESTIDOR,
                    string NUMERO_ENDERECO,
                    string COMPLEMENTO,
                    string BAIRRO,
                    string CIDADE,
                    string UF,
                    long CEP,
                    int PREFIXO_TELEFONE,
                    long NUMERO_TELEFONE,
                    string PESSOA_POLITICAMENTE_EXPOSTA,
                    object userState)
        {
            if ((this.IncluirInvestidor1OperationCompleted == null))
            {
                this.IncluirInvestidor1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncluirInvestidor1OperationCompleted);
            }
            this.InvokeAsync("IncluirInvestidor1", new object[] {
                        CPF,
                        DATA_NASCIMENTO,
                        CODIGO_INVESTIDOR,
                        DIGITO_INVESTIDOR,
                        EMAIL,
                        IDENTIFICACAO_OPERACAO,
                        TAXA_CUSTODIA,
                        NOME_INVESTIDOR,
                        CODIGO_DOCUMENTO,
                        TIPO_DOCUMENTO,
                        ORGAO_EMISSOR_DOCUMENTO,
                        SEXO_INVESTIDOR,
                        ESTADO_CIVIL,
                        NOME_CONJUGE,
                        CODIGO_CAPACIDADE,
                        NOME_RESPONSAVEL,
                        QUALIFICACAO_RESPONSAVEL,
                        CODIGO_ATIVIDADE,
                        CODIGO_NACIONALIDADE,
                        RUA_INVESTIDOR,
                        NUMERO_ENDERECO,
                        COMPLEMENTO,
                        BAIRRO,
                        CIDADE,
                        UF,
                        CEP,
                        PREFIXO_TELEFONE,
                        NUMERO_TELEFONE,
                        PESSOA_POLITICAMENTE_EXPOSTA}, this.IncluirInvestidor1OperationCompleted, userState);
        }

        private void OnIncluirInvestidor1OperationCompleted(object arg)
        {
            if ((this.IncluirInvestidor1Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncluirInvestidor1Completed(this, new IncluirInvestidor1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("hdSegurancaValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cblc.com.br/HabilitarInvestidor", RequestNamespace = "http://www.cblc.com.br/", ResponseNamespace = "http://www.cblc.com.br/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HabilitarInvestidor(double CPF, string DATA_NASCIMENTO, long CODIGO_INVESTIDOR, int DIGITO_INVESTIDOR, string EMAIL, int IDENTIFICACAO_OPERACAO, int TAXA_CUSTODIA)
        {
            object[] results = this.Invoke("HabilitarInvestidor", new object[] {
                        CPF,
                        DATA_NASCIMENTO,
                        CODIGO_INVESTIDOR,
                        DIGITO_INVESTIDOR,
                        EMAIL,
                        IDENTIFICACAO_OPERACAO,
                        TAXA_CUSTODIA});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void HabilitarInvestidorAsync(double CPF, string DATA_NASCIMENTO, long CODIGO_INVESTIDOR, int DIGITO_INVESTIDOR, string EMAIL, int IDENTIFICACAO_OPERACAO, int TAXA_CUSTODIA)
        {
            this.HabilitarInvestidorAsync(CPF, DATA_NASCIMENTO, CODIGO_INVESTIDOR, DIGITO_INVESTIDOR, EMAIL, IDENTIFICACAO_OPERACAO, TAXA_CUSTODIA, null);
        }

        /// <remarks/>
        public void HabilitarInvestidorAsync(double CPF, string DATA_NASCIMENTO, long CODIGO_INVESTIDOR, int DIGITO_INVESTIDOR, string EMAIL, int IDENTIFICACAO_OPERACAO, int TAXA_CUSTODIA, object userState)
        {
            if ((this.HabilitarInvestidorOperationCompleted == null))
            {
                this.HabilitarInvestidorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHabilitarInvestidorOperationCompleted);
            }
            this.InvokeAsync("HabilitarInvestidor", new object[] {
                        CPF,
                        DATA_NASCIMENTO,
                        CODIGO_INVESTIDOR,
                        DIGITO_INVESTIDOR,
                        EMAIL,
                        IDENTIFICACAO_OPERACAO,
                        TAXA_CUSTODIA}, this.HabilitarInvestidorOperationCompleted, userState);
        }

        private void OnHabilitarInvestidorOperationCompleted(object arg)
        {
            if ((this.HabilitarInvestidorCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HabilitarInvestidorCompleted(this, new HabilitarInvestidorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.cblc.com.br/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.cblc.com.br/", IsNullable = false)]
    public partial class hdSeguranca : System.Web.Services.Protocols.SoapHeader
    {

        private string strContratoHashField;

        private string strContratoSenhaField;

        private string strLoginNomeField;

        private string strLoginSenhaField;

        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        public string strContratoHash
        {
            get
            {
                return this.strContratoHashField;
            }
            set
            {
                this.strContratoHashField = value;
            }
        }

        /// <remarks/>
        public string strContratoSenha
        {
            get
            {
                return this.strContratoSenhaField;
            }
            set
            {
                this.strContratoSenhaField = value;
            }
        }

        /// <remarks/>
        public string strLoginNome
        {
            get
            {
                return this.strLoginNomeField;
            }
            set
            {
                this.strLoginNomeField = value;
            }
        }

        /// <remarks/>
        public string strLoginSenha
        {
            get
            {
                return this.strLoginSenhaField;
            }
            set
            {
                this.strLoginSenhaField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IncluirInvestidorCompletedEventHandler(object sender, IncluirInvestidorCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IncluirInvestidorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal IncluirInvestidorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IncluirInvestidor1CompletedEventHandler(object sender, IncluirInvestidor1CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IncluirInvestidor1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal IncluirInvestidor1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void HabilitarInvestidorCompletedEventHandler(object sender, HabilitarInvestidorCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HabilitarInvestidorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal HabilitarInvestidorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
